[{"/Users/sera/Documents/nwitter/src/index.js":"1","/Users/sera/Documents/nwitter/src/components/App.js":"2","/Users/sera/Documents/nwitter/src/components/Router.js":"3","/Users/sera/Documents/nwitter/src/routes/Auth.js":"4","/Users/sera/Documents/nwitter/src/routes/Home.js":"5","/Users/sera/Documents/nwitter/src/fbase.js":"6","/Users/sera/Documents/nwitter/src/components/Navigation.js":"7","/Users/sera/Documents/nwitter/src/routes/Profile.js":"8","/Users/sera/Documents/nwitter/src/components/Nweet.js":"9","/Users/sera/Documents/nwitter/src/components/NweetFactory.js":"10","/Users/sera/Documents/nwitter/src/components/AuthForm.js":"11"},{"size":230,"mtime":1613383960447,"results":"12","hashOfConfig":"13"},{"size":1318,"mtime":1613391013174,"results":"14","hashOfConfig":"13"},{"size":1094,"mtime":1613462311436,"results":"15","hashOfConfig":"13"},{"size":1387,"mtime":1613390958852,"results":"16","hashOfConfig":"13"},{"size":1422,"mtime":1613390846955,"results":"17","hashOfConfig":"13"},{"size":657,"mtime":1612770675235,"results":"18","hashOfConfig":"13"},{"size":987,"mtime":1613391355355,"results":"19","hashOfConfig":"13"},{"size":1682,"mtime":1613462207537,"results":"20","hashOfConfig":"13"},{"size":2239,"mtime":1613462283522,"results":"21","hashOfConfig":"13"},{"size":2804,"mtime":1613462303467,"results":"22","hashOfConfig":"13"},{"size":1855,"mtime":1613391056725,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"12xlfyl",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},"/Users/sera/Documents/nwitter/src/index.js",[],["50","51"],"/Users/sera/Documents/nwitter/src/components/App.js",[],"/Users/sera/Documents/nwitter/src/components/Router.js",[],"/Users/sera/Documents/nwitter/src/routes/Auth.js",[],"/Users/sera/Documents/nwitter/src/routes/Home.js",["52"],"import Nweet from \"components/Nweet\";\nimport NweetFactory from \"components/NweetFactory\";\nimport { dbService } from \"fbase\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Home = ({ userObj }) => {\n  const [nweets, setNweets] = useState([]); // array\n  const getNweets = async () => { // async를 써야 하므로 별도로 선언\n    const dbNweets = await dbService.collection(\"nweets\").get(); // querySnapshot\n    dbNweets.forEach((document) => {\n      const nweetObject = {\n        ...document.data(),\n        id: document.id,\n      };\n      // set에서 값대신 함수전달-> 이전값 불러오기\n      setNweets((prev) => [nweetObject, ...prev]); // 작성한 것과 이전 값들 배열로 불러오기\n    });\n  }\n\n  useEffect(() => {// component mount될 때\n    // rerender 하지 않는 방식\n    dbService.collection(\"nweets\").orderBy(\"createdAt\", \"desc\").onSnapshot(snapshot => { // onSnapshot : db 변동있을 때 알림\n      const nweetArray = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      setNweets(nweetArray);\n    });\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <NweetFactory userObj={userObj} />\n      <div style={{ marginTop: 30 }}>\n        {nweets.map((nweet) => (\n          <Nweet key={nweet.id} nweetObj={nweet} isOwner={nweet.creatorId === userObj.uid} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Home;","/Users/sera/Documents/nwitter/src/fbase.js",[],"/Users/sera/Documents/nwitter/src/components/Navigation.js",[],"/Users/sera/Documents/nwitter/src/routes/Profile.js",["53"],"import { authService } from \"fbase\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default ({ userObj, refreshUser }) => {\n  const history = useHistory();\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n  const onLogOutClick = () => {\n    authService.signOut();\n    history.push(\"/\"); // react router hook으로 이동시키기\n  };\n  // const getMyNweets = async() => {\n  //   // where로 필터링\n  //   const nweets = await dbService \n  //     .collection(\"nweets\")\n  //     .where(\"creatorId\", \"==\", userObj.uid)\n  //     .orderBy(\"createdAt\") // The query requires an index\n  //     .get();\n  // };\n  // useEffect(() => {\n  //   getMyNweets();\n  // }, [])\n  const onChange = (event) => {\n    const {\n      target: {value},\n    } = event;\n    setNewDisplayName(value);\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n\n    if (userObj.displayName !== newDisplayName) {\n      // firebase.User#updateprofile\n      await userObj.updateProfile({ \n        displayName: newDisplayName\n      });\n    }\n\n    // updateProfile refresh firebase user\n    // But Navigation is not connected firebase, is userObj\n    refreshUser();\n  };\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit} className=\"profileForm\">\n        <input onChange={onChange} type=\"text\" placeholder=\"Display Name\" value={newDisplayName} autoFocus className=\"formInput\" />\n        <input type=\"submit\" value=\"Update Profile\" className=\"formBtn\" style={{ marginTop: 10 }} />\n      </form>\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>Log Out</span>\n    </div>\n  );\n};","/Users/sera/Documents/nwitter/src/components/Nweet.js",[],"/Users/sera/Documents/nwitter/src/components/NweetFactory.js",[],"/Users/sera/Documents/nwitter/src/components/AuthForm.js",["54"],"import { authService } from \"fbase\";\nimport React, { useState } from \"react\";\n\nconst AuthForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  const onChange = (event) => {\n    const {target: {name, value}} = event;\n\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n  const onSubmit = async(event) => {\n    event.preventDefault(); // I dont want the default thing to happen. let me handle that\n\n    try {\n      let data;\n      if (newAccount) { // create account\n        // createUserWithEmailAndPassword ( email :  string ,  password :  string ) : Promise < UserCredential >\n        // Promise -> await ???\n        data = await authService.createUserWithEmailAndPassword(email, password);\n      } else { // log in\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"container\">\n        <input name=\"email\" type=\"email\" placeholder=\"Email\" required value={email} onChange={onChange} className=\"authInput\" />\n        <input name=\"password\" type=\"password\" placeholder=\"Password\" required value={password} onChange={onChange} className=\"authInput\" />\n        <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} className=\"authInput authSubmit\" />\n        {error && <span className=\"authError\">{error}</span>}\n      </form>\n      <span onClick={toggleAccount} className=\"authSwitch\">\n        {newAccount ? \"Sign in\" : \"Create Account\"}\n      </span>\n    </>\n  );\n};\n\nexport default AuthForm;",{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":8,"column":9,"nodeType":"61","messageId":"62","endLine":8,"endColumn":18},{"ruleId":"63","severity":1,"message":"64","line":5,"column":1,"nodeType":"65","endLine":52,"endColumn":3},{"ruleId":"59","severity":1,"message":"66","line":29,"column":9,"nodeType":"61","messageId":"62","endLine":29,"endColumn":13},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'getNweets' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]